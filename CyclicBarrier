package soccer.play;

import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.Random;
import java.util.concurrent.BrokenBarrierException;

public class Task implements Runnable{
	
	private int id;
	private CyclicBarrier barrier;
	private Random random;
	public Task(int id, CyclicBarrier barrier) {
		this.id=id;
		this.barrier=barrier;
		this.random=new Random();
	}

	@Override
	public void run() {
		System.out.println("Task with id "+id+" has started....");
		try {
			Thread.sleep(random.nextInt(3000));
			System.out.println("Barried reached for thread with id "+id);
			barrier.await();
		} catch (InterruptedException | BrokenBarrierException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}

public class League {
	
	public static void main(String[] args) {
	ExecutorService executor=Executors.newFixedThreadPool(5);
	
	CyclicBarrier cb=new CyclicBarrier(5,new Runnable(){
		@Override
		public void run() {
			System.out.println("All threads reached the barrier");
		}
	});
	
	for(int i=0;i<10;i++) {
		executor.execute(new Task(i+1,cb));
	}
	
	executor.shutdown();
	
		
	}
	
	
}
	
